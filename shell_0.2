#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/wait.h>

#define BUFSIZE 1024
#define PROMPT "$ "
#define DELIM " \t\r\n\a"

/* split a line into tokens by whitespace */
char **split_line(char *line)
{
    int bufsize = BUFSIZE;
    int position = 0;
    char **tokens = malloc(bufsize * sizeof(char *));
    char *token;

    if (!tokens)
    {
        fprintf(stderr, "allocation error\n");
        exit(EXIT_FAILURE);
    }

    token = strtok(line, DELIM);
    while (token != NULL)
    {
        tokens[position] = token;
        position++;

        if (position >= bufsize)
        {
            bufsize += BUFSIZE;
            tokens = realloc(tokens, bufsize * sizeof(char *));
            if (!tokens)
            {
                fprintf(stderr, "allocation error\n");
                exit(EXIT_FAILURE);
            }
        }

        token = strtok(NULL, DELIM);
    }
    tokens[position] = NULL;
    return tokens;
}

int main(void)
{
    char *line; /* the input line */
    char **args; /* the arguments for the command */
    size_t len = 0; /* the length of the input line */
    ssize_t read; /* the number of bytes read */
    pid_t pid; /* the process id */
    int status; /* the exit status */

    /* print the prompt and wait for input */
    printf(PROMPT);
    while ((read = getline(&line, &len, stdin)) != -1)
    {
        /* remove the newline character */
        line[read - 1] = '\0';

        /* split the line into tokens */
        args = split_line(line);

        /* fork a child process */
        pid = fork();
        if (pid == -1)
        {
            perror("fork");
            exit(EXIT_FAILURE);
        }

        if (pid == 0) /* child process */
        {
            /* execute the command with arguments */
            if (execve(args[0], args, NULL) == -1)
            {
                perror(args[0]);
                exit(EXIT_FAILURE);
            }
        }
        else /* parent process */
        {
            /* wait for the child to terminate */
            wait(&status);

            /* free the allocated memory */
            free(args);

            /* print the prompt and wait for input again */
            printf(PROMPT);
        }
    }

    /* handle end of file condition */
    if (read == -1)
    {
        printf("\n");
        exit(EXIT_SUCCESS);
    }

    return (0);
}